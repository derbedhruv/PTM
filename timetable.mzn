/* Highschool parent-teacher meet scheduler
--------------------------------------------------------
 * Author: Dhruv Joshi
 * Constraint optimization in minizinc for the purpose of scheduling
 * a parent-teacher meet. Constraints:
 	- Multiple teachers may teach multiple classes
	- All classes have the PTM on the same day
	- No two teachers can be at the same class at the same time slot
	- Each teacher shall visit only the class they teach, and only in one timeslot
	- empty slots are allowed

 * Presently this only deals with 4 classes - 10 (A,B) and 9 (A,B) and 10 subjects 
 * (and hence teachers) per class. The scope will be expanded to multiple classes.
*/ 
include "globals.mzn"; % standard

% solve minimize obj;
solve satisfy;

int: numClasses;
array[1..numClasses] of string: class_names;

int: numSlots;
set of int: slots = 1..numSlots;
array[slots] of string: timeSlots;

% 'teachers' is a union of all teachers of all classes
% This would have been generated by a python file which parsed the jsons/lists of the class assignments
int: num_avatars;	% this also acts as the primary key for teachers
array[1..num_avatars] of string: teacher_avatars;
array[1..num_avatars] of int: teacher_ids;

% int: numCoordinators;
% array[1..numCoordinators] of int: coordinators;

% definitions of arrays keeping track of teachers of various classes
% int: numSubjects;			% not needed anymore as this may vary for each class

% Now the variables - each classroom divided into the timeslots, to be filled with 'teacher IDs'
array[1..numClasses, slots] of var 0..num_avatars: timetable;
array[1..numClasses] of set of int: teachers_assignments;

% CONSTRAINTS
% 1. All should be different in a class, except the 0 case which is a free slot
include "alldifferent_except_0.mzn";
constraint forall(i in 1..numClasses) (alldifferent_except_0([ timetable[i, j] | j in slots ]));

% 2. All teachers should be different in a particular timeslot
%	 i.e. one teacher cannot be in two places in a particular slot
constraint forall(j in slots)
				  ( 
				  	%alldifferent_except_0([teacher_ids[tenA[t]], teacher_ids[tenB[t]], teacher_ids[nineA[t]], teacher_ids[nineB[t]]]
				  	alldifferent_except_0([ teacher_ids[timetable[i, j]+1] | i in 1..numClasses ])
				  );

% 3. Only teachers who teach a class should be listed in it for any slot
include "among.mzn";
constraint forall(i in 1..numClasses)
					(
						among( length(teachers_assignments[i]), [ timetable[i, j] | j in slots ], teachers_assignments[i] )
						);

% 4. coordinators should get early slots - will be 'manually' given by python program to speed things up
%	 since there are very few no of coordinators
% hardcoded version
/*
constraint tenA[1] = 1;
constraint tenB[2] = 1;
constraint nineA[3] = 1;
constraint tenA[2] = 6;
constraint nineA[1] = 6;
*/

% 5. No 3 consecutive slots for the same teacher
constraint forall(j in 1..numSlots-3)
			(
				forall(t in 1..num_avatars)
				(
					% counting constraints from https://www.minizinc.org/2.0/doc-lib/doc-globals-counting.html
					among([teacher_ids[timetable[i, j]  +1] | i in 1..numClasses], {t})
				+	among([teacher_ids[timetable[i, j+1]+1] | i in 1..numClasses], {t})
				+	among([teacher_ids[timetable[i, j+2]+1] | i in 1..numClasses], {t})
				+	among([teacher_ids[timetable[i, j+3]+1] | i in 1..numClasses], {t})
				< 4
				)
			);

% similarly constrain one empty slot at a time for each class
constraint forall(i in 1..numClasses, j in 1..numSlots-1)
					(
						if (timetable[i, j] == 0)
						then not (timetable[i, j+1] == 0)
						else true
						endif
						);

% first slot cannot be an empty slot
constraint forall(i in 1..numClasses)
					(
						not (timetable[i, 1] == 0)
						);


% PRINT OUT THE SOLUTION FOR HUMANS ON TERMINAL
/*
output["------------------------------------------------------------\ntimeslots\t"
	++ concat([ "\(class_names[c])\t" | c in 1..numClasses ])
	++ "\n------------------------------------------------------------" 
	++ 
	concat(
	%	["\(timeSlots[i])\t\(teacher_avatars[tenA[i]+1])\t\(teacher_avatars[tenB[i]+1])\t\(teacher_avatars[nineA[i]+1])\t\(teacher_avatars[nineB[i]+1])\n" | i in slots]
	%	["\(timeSlots[i])\t\(tenA[i])\t\(tenB[i])\t\(nineA[i])\t\(nineB[i])\n" | i in slots]
		["\n\(timeSlots[j])\t" ++ concat(["\(teacher_avatars[timetable[i, j]+1])\t" | i in 1..numClasses ]) | j in slots]
	%	["\n\(timeSlots[j])\t" ++ concat(["\(timetable[i, j])-" ++ "\(teacher_ids[timetable[i, j]+1])\t" | i in 1..numClasses ]) | j in slots]

		)
	++
	"\n------------------------------------------------------------\n"
	];
*/

% PRINT OUT THE SOLUTION FOR PYTHON TO CONVERT INTO AN EXCEL SHEET
output[
		% first print the no of classes and slots, tab seperated
		"\(numClasses)\t\(numSlots)\n"

		% then the names of classes
	++	concat([ "\(class_names[c])\t" | c in 1..numClasses ])

		% then print, in order, each class's teacher assignments
	++	concat(["\n" ++ concat(["\(teacher_ids[timetable[i, j]+1])\t" | j in slots ]) | i in 1..numClasses])
		
	];