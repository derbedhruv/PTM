% We will try to make a timetable scheduler software, given certain constraints

solve satisfy;

int: numSlots;
set of int: slots = 1..numSlots;
array[slots] of string: timeSlots;

% 'teachers' is a union of all teachers of all classes
% This would have been generated by a python file which parsed the jsons/lists of the class assignments
int: numTeachers;	% this also acts as the primary key for teachers
array[1..numTeachers] of string: teachers;

% definitions of arrays keeping track of teachers of various classes
int: numSubjects;
% array[1..numSubjects] of string: tenA_teachers;
set of int: tenA_teachers;
% array[1..numSubjects] of string: tenB_teachers;
% array[1..numSubjects] of string: nineA_teachers;
% array[1..numSubjects] of string: nineB_teachers;

% Now the variables - each classroom divided into the timeslots, to be filled with 'teacher IDs'
array[slots] of var 1..numTeachers: tenA;
array[slots] of var 1..numTeachers: tenB;
array[slots] of var 1..numTeachers: nineA;
array[slots] of var 1..numTeachers: nineB;

% CONSTRAINTS
% 1. All should be different in a class
include "alldifferent.mzn";
constraint alldifferent([tenA[i] | i in slots]);
constraint alldifferent([tenB[i] | i in slots]);
constraint alldifferent([nineA[i] | i in slots]);
constraint alldifferent([nineB[i] | i in slots]);

% 2. All teachers should be different in a particular slot

% 3. Only teachers who teach a class should be listed in it for any slot

% PRINT OUT THE SOLUTION
% "timeslots \t 10A \t 10B \t 9A \t 9B \n" ++ 
output["\(timeSlots[i])\t\(teachers[tenA[i]])\t\(teachers[tenB[i]])\t\(teachers[nineA[i]])\t\(teachers[nineB[i]])\n" | i in slots];