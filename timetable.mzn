/* Highschool parent-teacher meet scheduler
--------------------------------------------------------
 * Author: Dhruv Joshi
 * Constraint optimization in minizinc for the purpose of scheduling
 * a parent-teacher meet. Constraints:
 	- Multiple teachers may teach multiple classes
	- All classes have the PTM on the same day
	- No two teachers can be at the same class at the same time slot
	- Each teacher shall visit only the class they teach, and only in one timeslot
	- empty slots are allowed

 * Presently this only deals with 4 classes - 10 (A,B) and 9 (A,B) and 10 subjects 
 * (and hence teachers) per class. The scope will be expanded to multiple classes.
*/ 

% solve minimize obj;
solve satisfy;

int: numSlots;
set of int: slots = 1..numSlots;
array[slots] of string: timeSlots;

% 'teachers' is a union of all teachers of all classes
% This would have been generated by a python file which parsed the jsons/lists of the class assignments
int: num_avatars;	% this also acts as the primary key for teachers
int: numCoordinators;
array[1..num_avatars] of string: teacher_avatars;
array[1..num_avatars] of int: teacher_ids;
array[1..numCoordinators] of int: coordinators;

% definitions of arrays keeping track of teachers of various classes
int: numSubjects;
% array[1..numSubjects] of string: tenA_teachers;
set of int: tenA_teachers;
set of int: tenB_teachers;
set of int: nineA_teachers;
set of int: nineB_teachers;

% Now the variables - each classroom divided into the timeslots, to be filled with 'teacher IDs'
array[slots] of var 0..num_avatars: tenA;
array[slots] of var 0..num_avatars: tenB;
array[slots] of var 0..num_avatars: nineA;
array[slots] of var 0..num_avatars: nineB;

% CONSTRAINTS
% 1. All should be different in a class, except the 0 case which is a free slot
include "alldifferent_except_0.mzn";
constraint alldifferent_except_0([tenA[i] | i in 1..numSubjects]);
constraint alldifferent_except_0([tenB[i] | i in 1..numSubjects]);
constraint alldifferent_except_0([nineA[i] | i in 1..numSubjects]);
constraint alldifferent_except_0([nineB[i] | i in 1..numSubjects]);

% 2. All teachers should be different in a particular timeslot
%	 i.e. one teacher cannot be in two places in a particular slot
constraint forall(t in slots)
				  ( alldifferent_except_0([teacher_ids[tenA[t]], teacher_ids[tenB[t]], teacher_ids[nineA[t]], teacher_ids[nineB[t]]]) 
				  );

% 3. Only teachers who teach a class should be listed in it for any slot
include "among.mzn";
constraint among(numSubjects, tenA, tenA_teachers);
constraint among(numSubjects, tenB, tenB_teachers);
constraint among(numSubjects, nineA, nineA_teachers);
constraint among(numSubjects, nineB, nineB_teachers);

% 4. coordinators should get early slots - will be 'manually' given by python program
% hardcoded version
constraint tenA[1] = 1;
constraint tenB[2] = 1;
constraint nineA[3] = 1;
constraint tenA[2] = 6;
constraint nineA[1] = 6;

% 5. No 3 consecutive slots by the same teacher
% constraint forall(sl in 1..numSlots-1)();

/*
% minimization version of the problem - give coordinators early slots
var int: obj = sum(c in coordinators, j in 1..numSubjects)(if (tenA[j] == c) then j else 0 endif) 
			 + sum(c in coordinators, j in 1..numSubjects)(if (tenB[j] == c) then j else 0 endif)
			 + sum(c in coordinators, j in 1..numSubjects)(if (nineA[j] == c) then j else 0 endif)
			 + sum(c in coordinators, j in 1..numSubjects)(if (nineB[j] == c) then j else 0 endif);
*/

% PRINT OUT THE SOLUTION
output["----------------------------------------------\ntimeslots\t10A\t10B\t9A\t9B\n----------------------------------------------\n" 
	++ 
	concat(
		["\(timeSlots[i])\t\(teacher_avatars[tenA[i]+1])\t\(teacher_avatars[tenB[i]+1])\t\(teacher_avatars[nineA[i]+1])\t\(teacher_avatars[nineB[i]+1])\n" | i in slots]
	%	["\(timeSlots[i])\t\(tenA[i])\t\(tenB[i])\t\(nineA[i])\t\(nineB[i])\n" | i in slots]
		)
	++
	"----------------------------------------------\n"
	];